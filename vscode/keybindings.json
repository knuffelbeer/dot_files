
// Place your key bindings in this file to override the defaults
[
    // remap escape. Vs-code sucks
{ "key": "ctrl+[ ctrl+[",         "command": "workbench.action.exitZenMode",
                                     "when": "inZenMode" },
{ "key": "shift+ctrl+[",          "command": "closeReferenceSearch",
                                     "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
{ "key": "ctrl+[",                "command": "closeReferenceSearch",
                                     "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
{ "key": "ctrl+[",                "command": "editor.closeTestPeek",
                                     "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek" },
{ "key": "shift+ctrl+[",          "command": "cancelSelection",
                                     "when": "editorHasSelection && textInputFocus" },
{ "key": "ctrl+[",                "command": "cancelSelection",
                                     "when": "editorHasSelection && textInputFocus" },
{ "key": "shift+ctrl+[",          "command": "removeSecondaryCursors",
                                     "when": "editorHasMultipleSelections && textInputFocus" },
{ "key": "ctrl+[",                "command": "removeSecondaryCursors",
                                     "when": "editorHasMultipleSelections && textInputFocus" },
{ "key": "ctrl+[",                "command": "notebook.cell.chat.acceptChanges",
                                     "when": "inlineChatFocused && notebookCellChatFocused && notebookChatUserDidEdit && !notebookCellEditorFocused" },
{ "key": "ctrl+[",                "command": "notebook.cell.quitEdit",
                                     "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !inlineChatFocused" },
{ "key": "ctrl+[",                "command": "inlineChat.cancel",
                                     "when": "inlineChatHasProvider && inlineChatVisible && config.inlineChat.mode == 'preview'" },
{ "key": "ctrl+[",                "command": "inlineChat.close",
                                     "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatUserDidEdit" },
{ "key": "ctrl+[",                "command": "inlineChat.discard",
                                     "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatUserDidEdit" },
{ "key": "shift+ctrl+[",          "command": "closeBreakpointWidget",
                                     "when": "breakpointWidgetVisible && textInputFocus" },
{ "key": "ctrl+[",                "command": "closeBreakpointWidget",
                                     "when": "breakpointWidgetVisible && textInputFocus" },
{ "key": "ctrl+[",                "command": "editor.action.cancelSelectionAnchor",
                                     "when": "editorTextFocus && selectionAnchorSet" },
{ "key": "ctrl+[",                "command": "editor.action.hideColorPicker",
                                     "when": "standaloneColorPickerVisible" },
{ "key": "ctrl+[",                "command": "editor.action.inlineEdit.reject",
                                     "when": "inlineEditVisible && !editorReadonly" },
{ "key": "ctrl+[",                "command": "editor.action.inlineSuggest.hide",
                                     "when": "inlineSuggestionVisible" },
{ "key": "ctrl+[",                "command": "editor.action.selectEditor",
                                     "when": "stickyScrollFocused" },
{ "key": "ctrl+[",                "command": "editor.action.webvieweditor.hideFind",
                                     "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "ctrl+[",                "command": "editor.cancelOperation",
                                     "when": "cancellableOperation" },
{ "key": "ctrl+[",                "command": "editor.debug.action.closeExceptionWidget",
                                     "when": "exceptionWidgetVisible" },
{ "key": "ctrl+[",                "command": "editor.gotoNextSymbolFromResult.cancel",
                                     "when": "hasSymbols" },
{ "key": "ctrl+[",                "command": "editor.hideDropWidget",
                                     "when": "dropWidgetVisible" },
{ "key": "ctrl+[",                "command": "editor.hidePasteWidget",
                                     "when": "pasteWidgetVisible" },
{ "key": "ctrl+[",                "command": "inlayHints.stopReadingLineWithHint",
                                     "when": "isReadingLineWithInlayHints" },
{ "key": "ctrl+[",                "command": "notebook.cell.chat.discard",
                                     "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused && !notebookChatUserDidEdit" },
{ "key": "ctrl+[",                "command": "search.action.focusQueryEditorWidget",
                                     "when": "inSearchEditor" },
{ "key": "ctrl+[",                "command": "settings.action.clearSearchResults",
                                     "when": "inSettingsEditor && inSettingsSearch" },
{ "key": "ctrl+[",                "command": "welcome.goBack",
                                     "when": "inWelcome && activeEditor == 'gettingStartedPage'" },
{ "key": "shift+ctrl+[",          "command": "workbench.action.hideComment",
                                     "when": "commentEditorFocused" },
{ "key": "ctrl+[",                "command": "workbench.action.hideComment",
                                     "when": "commentEditorFocused" },
{ "key": "shift+ctrl+[",          "command": "closeFindWidget",
                                     "when": "editorFocus && findWidgetVisible && !isComposing" },
{ "key": "ctrl+[",                "command": "closeFindWidget",
                                     "when": "editorFocus && findWidgetVisible && !isComposing" },
{ "key": "ctrl+[",                "command": "leaveEditorMessage",
                                     "when": "messageVisible" },
{ "key": "shift+ctrl+[",          "command": "leaveSnippet",
                                     "when": "inSnippetMode && textInputFocus" },
{ "key": "ctrl+[",                "command": "leaveSnippet",
                                     "when": "inSnippetMode && textInputFocus" },
{ "key": "shift+ctrl+[",          "command": "closeDirtyDiff",
                                     "when": "dirtyDiffVisible" },
{ "key": "ctrl+[",                "command": "closeDirtyDiff",
                                     "when": "dirtyDiffVisible" },
{ "key": "shift+ctrl+[",          "command": "closeMarkersNavigation",
                                     "when": "editorFocus && markersNavigationVisible" },
{ "key": "ctrl+[",                "command": "closeMarkersNavigation",
                                     "when": "editorFocus && markersNavigationVisible" },
{ "key": "ctrl+[",                "command": "notifications.hideToasts",
                                     "when": "notificationToastsVisible" },
{ "key": "shift+ctrl+[",          "command": "closeParameterHints",
                                     "when": "editorFocus && parameterHintsVisible" },
{ "key": "ctrl+[",                "command": "closeParameterHints",
                                     "when": "editorFocus && parameterHintsVisible" },
{ "key": "shift+ctrl+[",          "command": "hideSuggestWidget",
                                     "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "ctrl+[",                "command": "hideSuggestWidget",
                                     "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "shift+ctrl+[",          "command": "cancelLinkedEditingInput",
                                     "when": "LinkedEditingInputVisible && editorTextFocus" },
{ "key": "ctrl+[",                "command": "cancelLinkedEditingInput",
                                     "when": "LinkedEditingInputVisible && editorTextFocus" },
{ "key": "shift+ctrl+[",          "command": "cancelRenameInput",
                                     "when": "editorFocus && renameInputVisible" },
{ "key": "ctrl+[",                "command": "cancelRenameInput",
                                     "when": "editorFocus && renameInputVisible" },
{ "key": "ctrl+[",                "command": "closeReplaceInFilesWidget",
                                     "when": "replaceInputBoxFocus && searchViewletVisible" },
{ "key": "ctrl+[",                "command": "commentsClearFilterText",
                                     "when": "commentsFilterFocus" },
{ "key": "ctrl+[",                "command": "keybindings.editor.clearSearchResults",
                                     "when": "inKeybindings && inKeybindingsSearch" },
{ "key": "ctrl+[",                "command": "keybindings.editor.rejectWhenExpression",
                                     "when": "inKeybindings && whenFocus && !suggestWidgetVisible" },
{ "key": "ctrl+[",                "command": "list.clear",
                                     "when": "listFocus && listHasSelectionOrFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "ctrl+[",                "command": "list.closeFind",
                                     "when": "listFocus && treeFindOpen" },
{ "key": "ctrl+[",                "command": "notebook.hideFind",
                                     "when": "notebookEditorFocused && notebookFindWidgetFocused" },
{ "key": "ctrl+[",                "command": "problems.action.clearFilterText",
                                     "when": "problemsFilterFocus" },
{ "key": "ctrl+[",                "command": "search.action.cancel",
                                     "when": "listFocus && searchViewletVisible && !inputFocus && !treestickyScrollFocused && searchState != '0'" },
{ "key": "ctrl+[",                "command": "settings.action.focusLevelUp",
                                     "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch" },
{ "key": "ctrl+ctrl+[",           "command": "workbench.action.chat.cancel" },
{ "key": "shift+ctrl+[",          "command": "workbench.action.closeQuickOpen",
                                     "when": "inQuickOpen" },
{ "key": "ctrl+[",                "command": "workbench.action.closeQuickOpen",
                                     "when": "inQuickOpen" },
{ "key": "shift+ctrl+[",          "command": "workbench.action.terminal.chat.close",
                                     "when": "terminalChatFocus && terminalChatVisible" },
{ "key": "ctrl+[",                "command": "workbench.action.terminal.chat.close",
                                     "when": "terminalChatFocus && terminalChatVisible" },
{ "key": "ctrl+[",                "command": "workbench.action.terminal.clearSelection",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocusInAny && terminalProcessSupported && terminalTextSelected && !terminalFindVisible" },
{ "key": "shift+ctrl+[",          "command": "workbench.action.terminal.hideFind",
                                     "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported" },
{ "key": "ctrl+[",                "command": "workbench.action.terminal.hideFind",
                                     "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported" },
{ "key": "ctrl+[",                "command": "workbench.banner.focusBanner",
                                     "when": "bannerFocused" },
{ "key": "ctrl+[",                "command": "workbench.statusBar.clearFocus",
                                     "when": "statusBarFocused" },
{ "key": "ctrl+[",                "command": "breadcrumbs.selectEditor",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "ctrl+[",                "command": "workbench.action.terminal.hideSuggestWidget",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "ctrl+[",                "command": "notebook.cell.quitEdit",
                                     "when": "notebookEditorFocused && notebookOutputFocused" },
{ "key": "ctrl+[",                "command": "editor.closeCallHierarchy",
                                     "when": "callHierarchyVisible && !config.editor.stablePeek" },
{ "key": "ctrl+[",                "command": "editor.closeTypeHierarchy",
                                     "when": "typeHierarchyVisible && !config.editor.stablePeek" },
{ "key": "ctrl+[",                "command": "filesExplorer.cancelCut",
                                     "when": "explorerResourceCut && filesExplorerFocus && foldersViewVisible && !inputFocus" },
{ "key": "shift+ctrl+[",          "command": "closeReferenceSearch",
                                     "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus" },
{ "key": "ctrl+[",                "command": "closeReferenceSearch",
                                     "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus" },
{ "key": "ctrl+[",                "command": "notifications.hideList",
                                     "when": "notificationCenterVisible" },
{ "key": "ctrl+[",                "command": "notifications.hideToasts",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "ctrl+[",                "command": "workbench.action.chat.stopListening",
                                     "when": "chatIsEnabled && hasSpeechProvider && voiceChatInProgress" },
{ "key": "ctrl+[",                "command": "workbench.action.chat.stopListeningInChatEditor",
                                     "when": "chatIsEnabled && hasSpeechProvider && voiceChatInEditorInProgress" },
{ "key": "ctrl+[",                "command": "workbench.action.chat.stopListeningInChatView",
                                     "when": "chatIsEnabled && hasSpeechProvider && voiceChatInViewInProgress" },
{ "key": "ctrl+[",                "command": "workbench.action.chat.stopListeningInQuickChat",
                                     "when": "chatIsEnabled && hasSpeechProvider && quickVoiceChatInProgress" },
{ "key": "ctrl+[",                "command": "workbench.action.chat.stopListeningInTerminalChat",
                                     "when": "chatIsEnabled && hasSpeechProvider && terminalVoiceChatInProgress" },
{ "key": "ctrl+[",                "command": "workbench.action.editorDictation.stop",
                                     "when": "editorDictation.inProgress" },
{ "key": "ctrl+[",                "command": "vscode-neovim.escape",
                                     "when": "editorTextFocus && neovim.init && editorLangId not in 'neovim.editorLangIdExclusions'" },
{ "key": "ctrl+c",                "command": "vscode-neovim.escape",
                                     "when": "editorTextFocus && neovim.ctrlKeysNormal.c && neovim.init && !dirtyDiffVisible && !findWidgetVisible && !inReferenceSearchEditor && !markersNavigationVisible && !notebookCellFocused && !notificationCenterVisible && !parameterHintsVisible && !referenceSearchVisible && neovim.mode == 'normal' && editorLangId not in 'neovim.editorLangIdExclusions'" },
{ "key": "ctrl+c",                "command": "vscode-neovim.escape",
                                     "when": "editorTextFocus && neovim.ctrlKeysInsert.c && neovim.init && neovim.mode != 'normal' && editorLangId not in 'neovim.editorLangIdExclusions'" },
{ "key": "ctrl+[",                "command": "vscode-neovim.escape",
                                     "when": "editorTextFocus && neovim.init && !dirtyDiffVisible && !findWidgetVisible && !inReferenceSearchEditor && !markersNavigationVisible && !notebookCellFocused && !notificationCenterVisible && !parameterHintsVisible && !referenceSearchVisible && neovim.mode == 'normal' && editorLangId not in 'neovim.editorLangIdExclusions'" },
{ "key": "ctrl+[",                "command": "vscode-neovim.escape",
                                     "when": "editorTextFocus && neovim.init && neovim.mode != 'normal' && editorLangId not in 'neovim.editorLangIdExclusions'" },
{ "key": "ctrl+[",                "command": "interactive.input.clear",
                                     "when": "!LinkedEditingInputVisible && !accessibilityHelpWidgetVisible && !breakpointWidgetVisible && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !exceptionWidgetVisible && !findWidgetVisible && !inSnippetMode && !isComposing && !markersNavigationVisible && !notificationToastsVisible && !parameterHintsVisible && !renameInputVisible && !selectionAnchorSet && !suggestWidgetVisible && activeEditor == 'workbench.editor.interactive'" },
{ "key": "ctrl+[",                "command": "hideCodeActionWidget",
                                     "when": "codeActionMenuVisible" },
{ "key": "ctrl+[",                "command": "diffEditor.exitCompareMove",
                                     "when": "comparingMovedCode" }
]
